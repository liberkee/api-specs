swagger: "2.0"
info:
  version: "1.0.0"
  title: SixSense Cloud API - vehicle master data EXTERNAL
  license:
    name:  Huf Proprietary
  description: |

      ![Brand Logo](./images/sixsense.png)

      ![States Image](./images/pic_external.jpg)

      # Purpose of the vehicle master data API

        This API allows to transfer the service enabler status (device installation & test status) from the Huf customer system to the external system.

      # Changelog

      ## 1.0.0
        Approved after review.

      ## 0.0.1
        Initial draft for review.

      # Mandatory/optional fields
        - In this specification, all mandatory data fields are marked with a red asterisk character ('*').
        - All other data fields are optional.

      # Event correlation IDs

        - Event correlation IDs enable tracking of all actions performed within the processing systems which are related to one event.
        - If generation of an event is a direct result of a received event, then the generator shall use the correlationID of the received event. That way, chains of events can be tracked throughout the system.
        - There are two options where the correlation ID can be generated.
          1) The recommended option is that the source of an event generates a unique correlation ID and passes it to the event handler as part of the event body.
          2) Alternatively, the event source may choose to not generate a correlation ID when passing the event to the event handler. In this case, the event handler itself generates a unique correlation ID for the event.
        - To enable option 2, the correlation ID is defined as optional.
        - In any case, the correlation ID is returned in the body of the event response. Thus the event source can make use of the correlation ID even in case it does not generate one.

      # Tenant IDs

        - Scenario: One system is exclusively operated for one business customer. The customer may have several logical sub-organizations (e.g. car rental agencies), which are represented as tenants.
        - In the context of *this API section*, tenantIds refer to vehicles ONLY.
        - The tenantId is defined as optional. When left out, the tenant with the name "default" is used by the customer system.
        - If there was no tenantId in the received event, there will also be the tenantId "default" in the resulting events.
        - In requests with a tenantId, Huf ONLY returns and modifies vehicle data related to that tenant.
        - When a received event results in one or more outgoing events, each outgoing event carries the same tenantId that was present in the received event.
        - A tentant ID shall only include letters and numbers, otherwise system behavior is not guaranteed.
          - regular expression: ^[a-zA-Z0-9]+$
        - Tenant IDs are case-senitive, e.g. "carrental" is a different tenant than "CarRental".
        - The following strings are reserved tenant IDs and no specific system behavior is guaranteed when they are used:
          - all, any, none, default (in all possible lower/upper case combinations)

        ![States Image](./images/tenants.jpg)

      # HTTP Status Codes:

        - Unknown event types are accepted by the event handler and 200 is returned. But they will not be processed as no receiver has subscribed to the event type.
        - Known event type with not matching payload is accepted by the event handler and 200 is returned. But the receiver which has subscribed to the event type will generate an error event due to the broken payload.
        - In case 40x HTTP errors are returned, the response body is empty (no correlation ID is returned).

      | Http Code | Description | Information |
      | :---         |     :---      |     :---      |
      | 200 | Success - event was received & persisted | event not necessarily processed successfully |
      | 400 | Bad Request - broken header or incorrect json |may include subCode |
      | 401 | Unauthorized - Client certificate missing or invalid | may include subCode |
      | 403 | Forbidden - Client identified by certificate not authorized to post this event | may include subCode |
      | 404 | Not Found - route suffixed with unknown resource | may include subCode |
      | 500 | Internal Server Error | |
      | 503 | Service Unavailable | |

      # Failure handling (optional)

      ### Huf does not expect the described failure handling as mandatory. If failure handling is implemented in this side of the API, consider the below as suggestion to be consistent with the failure handling on the Huf side of the API. Implemented failure handling significantly improves troubleshooting procedures.

        This section specifies under which circumstances the EXTERNAL devices API shall trigger failure events.
        This specification does not include failures that are already handled by the Event Handler and notified via HTTP error codes.
        So this speciifcation assumes that the generic structure of the received event is correct and the event payload is at least correct JSON.
        In case more than one failure occurs in the same event, only the first detected failure is reported.
        The failure reason field contains a string that describes the failure cause.

      ## Format failures

      In case of mismatches with the specified event format, the failure reasons are not specified in detail, as they may be provided by a validation library. Exact failure reason strings may change when changing or updating such a library.

      If there is a format failure in an "Event", the resulting failure event shall be of type "EventFailed".

      ## Processing failures

      For events with correct format, failures can still occur while processing the event. This table lists the failure reasons for the applicable processing failures.

      | Event sent to EXTERNAL API      | Issue                                       | Resulting failure event               | Failure reason
      |---------------------------------|---------------------------------------------|---------------------------------------|------------------------------
      | huf.vehicleServiceEnablerUpdated | externalVehicleRef unknown for given tenant                 | huf.vehicleServiceEnablerUpdatedFailed | "externalVehicleRef unknown for given tenant"
      | huf.vehicleServiceEnablerUpdated | Internal processing error                   | huf.vehicleServiceEnablerUpdatedFailed | "internalProcessingError"

host: HOST:PORT
basePath: /api/v1
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json

#PATHS

paths:

## Events

  /events - huf.vehicleMasterDataAddedFailed:
    $ref: "./definitions/paths/events_vehicle_master_data_added_failed.yaml"

  /events - huf.vehicleServiceEnablerUpdated:
    $ref: "./definitions/paths/events_vehicle_service_enabler_updated.yaml"

definitions:

# Event types

  vehicleMasterDataAddedFailed:
    $ref: "./definitions/events/vehicleMasterDataAddedFailed.yaml"

  vehicleServiceEnablerUpdated:
    $ref: "./definitions/events/vehicleServiceEnablerUpdated.yaml"

# Responses

  getVehiclesMasterDataResponse:
    $ref: "./definitions/responses/getVehiclesMasterDataResponse.yaml"

  eventResponse:
    $ref: "./definitions/responses/eventResponse.yaml"

# Models

  vehicleMasterDataAddedFailedPayload:
    $ref: "./definitions/models/vehicleMasterDataAddedFailedPayload.yaml"

  vehicleServiceEnablerUpdatedPayload:
    $ref: "./definitions/models/vehicleServiceEnablerUpdatedPayload.yaml"

  property:
    $ref: "./definitions/models/property.yaml"
