swagger: "2.0"
info:
  version: "1.3.0"
  title: SixSense Cloud API - vehicle master data HUF
  license:
    name:  Huf Proprietary
  description: |

      ![Brand Logo](./images/sixsense.png)

      ![States Image](./images/pic_huf.jpg)

      # Purpose of the vehicle master data API

        This API allows to transfer vehicle data from the external system to the Huf customer system. Vehicle data is required to allow service technicians to identify and locate the vehicle they need to work on in the SixSense Service App.

      # Changelog

      ## 1.3.0

        - added hufVehicleTypeId to vehicleMasterDataAdded

      ## 1.2.0
        - added GET /vehicles/masterData route
        - added GET /vehicles/{externalVehicleRef}/masterData route
        - Added maximum field lengths to vehicleMasterDataAdded and vehicleMasterDataDeleted

      ## 1.1.0
        - added vehicleMasterDataDeleted event

      ## 1.0.0
        Approved after review.

      ## 0.0.1
        Initial draft for review.

      # Mandatory/optional fields
        - In this specification, all mandatory data fields are marked with a red asterisk character ('*').
        - All other data fields are optional.

      # Time formats

        - All times exchanged over this interface shall be based on UTC (Coordinated Universal Time).
        - All strings representing times shall be formatted according to ISO8601.

      # Tenant IDs

        - Scenario: One system is exclusively operated for one business customer. The customer may have several logical sub-organizations (e.g. car rental agencies), which are represented as tenants.
        - In the context of *this API section*, tenantIds refer to vehicles ONLY.
        - The tenantId is defined as optional. When left out, the tenant with the name "default" is used by the customer system.
        - If there was no tenantId in the received event, there will also be the tenantId "default" in the resulting events.
        - In requests with a tenantId, Huf ONLY returns and modifies vehicle data related to that tenant.
        - When a received event results in one or more outgoing events, each outgoing event carries the same tenantId that was present in the received event.
        - A tentant ID shall only include letters and numbers, otherwise system behavior is not guaranteed.
          - regular expression: ^[a-zA-Z0-9]+$
        - Tenant IDs are case-senitive, e.g. "carrental" is a different tenant than "CarRental".
        - The following strings are reserved tenant IDs and no specific system behavior is guaranteed when they are used:
          - all, any, none, default (in all possible lower/upper case combinations)

        ![States Image](./images/tenants.jpg)

      # HTTP Status Codes:

        - Unknown event types are accepted by the event handler and 200 is returned. But they will not be processed as no receiver has subscribed to the event type.
        - Known event type with not matching payload is accepted by the event handler and 200 is returned. But the receiver which has subscribed to the event type will generate an error event due to the broken payload.
        - In case 40x HTTP errors are returned, the response body is empty (no correlation ID is returned).

      | Http Code | Description | Information |
      | :---         |     :---      |     :---      |
      | 200 | Success | |
      | 400 | Bad Request | |
      | 403 | Forbidden - Client identified by certificate not authorized to call this request | |
      | 404 | Not Found - externalVehicleRef not found or route suffixed with unknown resource | |
      | 500 | Internal Server Error | |
      | 503 | Service Unavailable | Due to a 3rd party component, this is also returned when the client certificate is missing or invalid. |

      # Failure handling

        This section specifies under which circumstances the EXTERNAL devices API shall trigger failure events.
        This specification does not include failures that are already handled by the Event Handler and notified via HTTP error codes.
        So this speciifcation assumes that the generic structure of the received event is correct and the event payload is at least correct JSON.
        In case more than one failure occurs in the same event, only the first detected failure is reported.
        The failure reason field contains a string that describes the failure cause.

      ## Format failures

      In case of mismatches with the specified event format, the failure reasons are not specified in detail, as they may be provided by a validation library. Exact failure reason strings may change when changing or updating such a library.

      If there is a format failure in an "Event", the resulting failure event shall be of type "EventFailed".

      ## Processing failures

      For events with correct format, failures can still occur while processing the event. This table lists the failure reasons for the applicable processing failures.

      | Event sent to HUF API          | Issue                                                  | Resulting failure event              | Failure reason
      |--------------------------------|--------------------------------------------------------|--------------------------------------|------------------------------
      | huf.vehicleMasterDataAdded    | externalVehicleRef already added                              | huf.vehicleMasterDataAddedFailed    | "externalVehicleRef already added for given tenant"
      | huf.vehicleMasterDataAdded    | Internal processing error                              | huf.vehicleMasterDataAddedFailed    | "internalProcessingError"
      | huf.vehicleMasterDataDeleted    | Vehicle not found                              | huf.vehicleMasterDataDeletedFailed    | "externalVehicleRef not found for given tenant"
      | huf.vehicleMasterDataDeleted    | Vehicle is commissioned                              | huf.vehicleMasterDataDeletedFailed    | "Master data of commissioned vehicle cannot be deleted. Please decommission first."
      | huf.vehicleMasterDataDeleted    | Internal processing error                              | huf.vehicleMasterDataDeletedFailed    | "internalProcessingError"

host: '{Please request URL and port from your Huf technical contact}'
basePath: /api/v1
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json

#PATHS

paths:

## Events & GETs

  /events - huf.vehicleMasterDataAdded:
    $ref: "./definitions/paths/events_vehicle_master_data_added.yaml"

  /events - huf.vehicleMasterDataDeleted:
    $ref: "./definitions/paths/events_vehicle_master_data_deleted.yaml"

  /vehicles/masterData:
    $ref: "./definitions/paths/get_vehicles_master_data.yaml"

  /vehicles/{externalVehicleRef}/masterData:
    $ref: "./definitions/paths/get_vehicle_master_data.yaml"

  /events - huf.vehicleServiceEnablerUpdatedFailed:
    $ref: "./definitions/paths/events_vehicle_service_enabler_updated_failed.yaml"

  /vehicles/{externalVehicleRef}/serviceEnablers:
    $ref: "./definitions/paths/get_vehicle_service_enablers.yaml"

definitions:

# Event types

  vehicleMasterDataAdded:
    $ref: "./definitions/events/vehicleMasterDataAdded.yaml"

  vehicleMasterDataDeleted:
    $ref: "./definitions/events/vehicleMasterDataDeleted.yaml"

  vehicleServiceEnablerUpdatedFailed:
    $ref: "./definitions/events/vehicleServiceEnablerUpdatedFailed.yaml"

# Responses

  eventResponse:
    $ref: "./definitions/responses/eventResponse.yaml"

# Models

  vehicleMasterData:
    $ref: "./definitions/models/vehicleMasterData.yaml"

  vehicleMasterData404:
    $ref: "./definitions/models/vehicleMasterData404.yaml"

  vehiclesMasterData:
    $ref: "./definitions/models/vehiclesMasterData.yaml"

  vehicleMasterDataDel:
    $ref: "./definitions/models/vehicleMasterDataDel.yaml"

  property:
    $ref: "./definitions/models/property.yaml"

  vehicleServiceEnablers:
    $ref: "./definitions/models/vehicleServiceEnablers.yaml"

  vehicleServiceEnablers404:
    $ref: "./definitions/models/vehicleServiceEnablers404.yaml"

  device:
    $ref: "./definitions/models/device.yaml"

  errorStatus:
    $ref: "./definitions/models/errorStatus.yaml"

  vehicleServiceEnablerUpdatedFailedPayload:
    $ref: "./definitions/models/vehicleServiceEnablerUpdatedFailedPayload.yaml"
